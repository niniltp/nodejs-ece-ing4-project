<!DOCTYPE html>
<html lang="en">
<head>
    <% include partials/head.ejs %>
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://d3js.org/d3-selection-multi.v1.min.js"></script>
    <style>
        .hide {
            display: none;
        }
    </style>
</head>
<body class="container">
<div class="col-md-6 col-md-offset-3">
    <h1 class="mb-2">Hello <%= name %> !</h1>
    <hr>
    <button class="btn btn-danger mt-2" href="/logout" onClick='document.location.href="/logout"'>Logout</button>
    <h3><%= message %></h3>
    <hr>
    <form action="#" class="needs-validation form-inline mt-2 mb-2" method="post" novalidate>
        <div class="form-group">
            <label for="form_metric" class="mr-4">Add a metric: </label>
            <input id="form_metric" class="form-control mr-4" type="number" name="value"
                   placeholder="Enter metric value" required/>
        </div>
        <button class="btn btn-success" id="save-metric" type="submit" value="Submit">Save</button>
    </form>
    <hr>
    <form action="#" class="needs-validation form-inline  mt-2 mb-2" method="post" novalidate>
        <div class="form-group">
            <label for="modify_metric" class="mr-4">Modify a metric : </label>
            <input id="modify_metric" class="form-control mr-4" type="text" name="metricID"
                   placeholder="Enter metric ID" required/>
            <input id="modify_form_metric" class="form-control mr-4" type="number" name="new_value"
                   placeholder="Enter its new value" required/>
        </div>
        <button class="btn btn-success mt-2" id="change-metric" type="submit" value="Submit">Change metric</button>
    </form>
    <hr>
    <form action="#" class="needs-validation form-inline  mt-2 mb-2" method="post" novalidate>
        <div class="form-group">
            <label for="erase_metric" class="mr-4">Delete a metric : </label>
            <input id="erase_metric" class="form-control mr-4" type="text" name="metricID"
                   placeholder="Enter metric ID" required/>
        </div>
        <button class="btn btn-danger mt-2" id="delete-metric" type="submit" value="Submit">Delete metric</button>
    </form>
    <hr>
    <button class="btn btn-primary" id="show-metrics"> Show the metrics</button>
    <button class="btn btn-primary" id="show-line-graph"> Show line graph</button>
    <button class="btn btn-primary" id="show-bar-graph"> Show bar chart</button>
    <div id="metrics" class="mt-5 mb-5 hide"></div>
    <svg class="line-chart hide"></svg>
    <svg class="bar-chart hide" width="900" height="500"></svg></div>
</body>
<script type="text/javascript">

    var isShown = {
        'metrics': false,
        'line': false,
        'bar': false,

    };

    $('#show-metrics').click((e) => {
        e.preventDefault();
        if (isShown['metrics'] === false) {
            isShown['metrics'] = true;
            $('#show-metrics').text('Hide metrics');
        } else {
            isShown['metrics'] = false;
            $('#show-metrics').text('Show metrics');
        }
        $.getJSON("/users/<%= name %>/metrics", {}, (data) => {
            const content = data.map(d => {
                return 'timestamp: ' + d.timestamp + ', value: ' + d.value + '<br/>';
            })
            $('#metrics').html(content);
            $('#metrics').toggle();
        });
    })
    $('#save-metric').click((e) => {
        e.preventDefault();
        const value = $('#form_metric').val();

        if (value) {
            const metrics = [{
                timestamp: (new Date().getTime()).toString(),
                value: parseFloat(value)
            }];
            $.ajax("/users/<%= name %>/metrics", {
                data: JSON.stringify(metrics),
                method: "POST",
                contentType: "application/json",
                statusCode: {
                    200: function (responseObject, textStatus, jqXHR) {
                        let forms = document.getElementsByClassName('needs-validation');
                        Array.prototype.filter.call(forms, function (form) {
                            form.classList.remove("was-validated");
                        }, false);
                        alert("Metric saved successfully.");
                        $('#form_metric').val("");
                    }
                }
            });
        }
    })

    $('#change-metric').click((e) => {
        e.preventDefault();
        const valueID = $('#modify_metric').val();
        const value = $('#modify_form_metric').val();
        if (value) {
            if (valueID) {
                const metric = {
                    timestamp: valueID,
                    value: parseFloat(value)
                };
                $.ajax("/users/<%= name %>/metrics/" + valueID, {
                    data: JSON.stringify(metric),
                    method: "PUT",
                    contentType: "application/json",
                    statusCode: {
                        200: function (responseObject, textStatus, jqXHR) {
                            let forms = document.getElementsByClassName('needs-validation');
                            Array.prototype.filter.call(forms, function (form) {
                                form.classList.remove("was-validated");
                            }, false);
                            alert("Metric updated successfully.");
                            $('#modify_metric').val("");
                            $('#modify_form_metric').val("");
                        },
                        409: function (responseObject, textStatus, jqXHR) {
                            alert("Metric does not exist.");
                        }
                    }
                });
            }
        }
    })
    $('#delete-metric').click((e) => {
        e.preventDefault();
        const valueID = $('#erase_metric').val();

        if (valueID) {
            $.ajax("/users/<%= name %>/metrics/" + valueID, {
                method: "DELETE",
                contentType: "application/json",
                statusCode: {
                    200: function (responseObject, textStatus, jqXHR) {
                        let forms = document.getElementsByClassName('needs-validation');
                        Array.prototype.filter.call(forms, function (form) {
                            form.classList.remove("was-validated");
                        }, false);
                        alert("Metric deleted successfully.");
                        $('#erase_metric').val("");
                    }
                }
            });
        }

    })

    /** On click to show graph **/
    $('#show-line-graph').click((e) => {
        if (isShown['line'] === false) {
            isShown['line'] = true;
            $('#show-line-graph').text('Hide line graph');
        } else {
            isShown['line'] = false;
            $('#show-line-graph').text('Show line graph');
        }
        $('.line-chart').empty();
        loadData(0);
        $('.line-chart').toggle();

    })

    $('#show-bar-graph').click((e) => {
        if (isShown['bar'] === false) {
            isShown['bar'] = true;
            $('#show-bar-graph').text('Hide bar chart');
        } else {
            isShown['bar'] = false;
            $('#show-bar-graph').text('Show bar chart');
        }
        $('.bar-chart').empty();
        loadData(1);
        $('.bar-chart').toggle();

    })

    /****** Script graph *******/
    const api = '/users/<%= name %>/metrics';

    /** Loading data from API **/
    function loadData(id) {
        fetch('/users/<%= name %>/metrics')
            .then(res => res.json())
            .then(res => {
                console.log(res);
                var parsedData = parseData(res);
                if (id === 0) {
                    drawChart(parsedData);
                } else if (id === 1) {
                    drawBarChart(parsedData);
                }


            })
            .catch(function (error) { console.log(error); });
    };


    /** Parse data in array **/
    function parseData(data) {
        var arr = [];
        const content = data.map(d => {
            arr.push({
                timestamp: d.timestamp,
                value: d.value,
            });
        })
        return arr;
    }

    /** Creates a chart using D3 **/
    function drawChart(data) {
        var svgWidth = 900, svgHeight = 400;
        var margin = { top: 20, right: 20, bottom: 30, left: 50 };
        var width = svgWidth - margin.left - margin.right;
        var height = svgHeight - margin.top - margin.bottom;

        var svg = d3.select('.line-chart')
            .attr("width", svgWidth)
            .attr("height", svgHeight);

        var g = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x = d3.scaleTime()
            .rangeRound([0, width]);

        var y = d3.scaleLinear()
            .rangeRound([height, 0]);

        var line = d3.line()
            .x(function (d) { return x(d.timestamp) })
            .y(function (d) { return y(d.value) })
        x.domain(d3.extent(data, function (d) { return d.timestamp }));
        y.domain(d3.extent(data, function (d) { return d.value }));

        g.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            ;

        g.append("g")
            .call(d3.axisLeft(y))
            .append("text")
            .attr("fill", "#000")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "0.71em")
            .attr("text-anchor", "end")
            .text("Value");

        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "RoyalBlue")
            .attr("stroke-linejoin", "round")
            .attr("stroke-linecap", "round")
            .attr("stroke-width", 1.5)
            .attr("d", line);
    }


    /** Create a bar chart using D3 **/
    function drawBarChart(data) {

        var svg = d3.select(".bar-chart"),
            margin = 200,
            width = svg.attr("width") - margin,
            height = svg.attr("height") - margin


        var xScale = d3.scaleBand().range([0, width]).padding(0.4),
            yScale = d3.scaleLinear().range([height, 0]);

        var g = svg.append("g")
            .attr("transform", "translate(" + 100 + "," + 100 + ")");
        var parseDate = d3.isoParse;
        d3.json(api, function (error, data) {
            if (error) {
                throw error;
            }

            data.forEach(function (d) {
                var dateObj = new Date(d.timestamp * 1000);
                var month = dateObj.getMonth() + 1; //months from 1-12
                var day = dateObj.getDate();
                var date = day + "/" + month;
                d.timestamp = date;
                d.value = +d.value;
            });
            console.log(data);

            xScale.domain(data.map(function (d) { return d.timestamp; }));
            yScale.domain([0, d3.max(data, function (d) { return d.value; })]);

            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(xScale));

            g.append("g")
                .call(d3.axisLeft(yScale).tickFormat(function (d) {
                    return d;
                }).ticks(10));


            g.selectAll(".bar")
                .data(data)
                .enter().append("rect")
                .style("fill", "PaleVioletRed")
                .attr("x", function (d) { return xScale(d.timestamp); })
                .attr("y", function (d) { return yScale(d.value); })
                .attr("width", xScale.bandwidth())
                .attr("height", function (d) { return height - yScale(d.value); });
        });

    }
</script>
</html>